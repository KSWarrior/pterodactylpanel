name: Pterodactyl Panel

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

concurrency:
  group: pterodactyl
  cancel-in-progress: true

jobs:
  panel:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      # 1. Install Docker Compose
      - name: Install Docker Compose
        run: |
          set -euo pipefail
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # 2. Download latest backup from GitHub Release
      - name: Download latest backup from Releases
        continue-on-error: true
        uses: robinraju/release-downloader@v1.11
        with:
          tag: backups
          fileName: "pterodactyl-backup.tar.gz"
          out-file-path: "."

      # 3. Restore Backup if Available
      - name: Restore backup
        run: |
          set -euo pipefail
          sudo mkdir -p /ks
          cd /ks
          if [ -f "${GITHUB_WORKSPACE}/pterodactyl-backup.tar.gz" ]; then
            echo "üîÑ Found backup archive. Restoring pterodactyl folder..."
            sudo rm -rf pterodactyl
            sudo tar -xzf "${GITHUB_WORKSPACE}/pterodactyl-backup.tar.gz" -C .
            echo "‚úÖ Backup restored successfully at /ks/pterodactyl"
          else
            echo "‚ö†Ô∏è No backup found. Starting fresh with empty /ks/pterodactyl"
            sudo mkdir -p pterodactyl/panel
          fi

      # 5. Setup Cloudflare Tunnel (Optional)
      - name: Cloudflare Tunnel
        run: |
          # Download the latest binary
          curl -LO https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64

          # Make it executable
          chmod +x cloudflared-linux-amd64

          # Move it to a directory in PATH
          sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared

          # Verify installation
          cloudflared --version
          sudo cloudflared service install eyJhIjoiZTJkZjY3MDI5ZWZlZTBmY2JhM2ExMjNjN2VmNTcxNTAiLCJ0IjoiYTNkM2Y0YTctMTg5OS00YWRlLWE2ZWEtMDZjYTk3YjNiNzM0IiwicyI6Ik9HWm1ZemxtTkdJdFpXUXhPUzAwTmpFeExUazFaR1V0TnpCak5qTmpOVE15TURBeiJ9

      # 4. Start Pterodactyl Panel
      - name: Start Panel
        run: |
          cd /ks/pterodactyl/panel
          docker-compose up -d
          echo "‚úÖ Pterodactyl Panel started."
          
      # 6. Keep Panel Alive
      - name: Start Tmate (for debug - non-blocking)
        if: always()
        run: |
          set -euo pipefail
          curl -sL https://github.com/tmate-io/tmate/releases/latest/download/tmate-2.4.0-static-linux-amd64.tar.xz | tar -xJ
          sudo mv tmate-2.4.0-static-linux-amd64/tmate /usr/local/bin/ || true
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}' || true
          sleep 500

      # 7. Create Backup
      - name: Backup Panel Data
        if: always()
        run: |
          echo "üì¶ Creating full backup of /ks/pterodactyl..."
          cd /ks
          sudo tar -czf "${GITHUB_WORKSPACE}/pterodactyl-backup.tar.gz" pterodactyl
          ls -lh "${GITHUB_WORKSPACE}/pterodactyl-backup.tar.gz"

      # 8. Delete Old Backup Assets
      - name: Delete old backup assets
        if: always()
        run: |
          assets=$(gh release view backups --json assets --jq '.assets[].name' || echo "")
          for asset in $assets; do
            gh release delete-asset backups "$asset" -y || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. Upload New Backup to Release
      - name: Upload to GitHub Release
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: backups
          name: "Latest Pterodactyl Backup"
          body: "Full backup of /ks/pterodactyl"
          files: pterodactyl-backup.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10. Auto-Restart Workflow
      - name: Restart Workflow
        if: always()
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Pterodactyl Panel
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
